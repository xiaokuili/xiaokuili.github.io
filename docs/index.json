[{"content":"","date":"29 August 2023","permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI"},{"content":"","date":"29 August 2023","permalink":"/tags/github-hot/","section":"Tags","summary":"","title":"github hot"},{"content":" 核心 # 数据和AI模型更加友好调用 vs empowers developers to connect any AI/ML model to any datasource. 场景和AI模型列表 案例分析 # 使用场景 Prompt chatbot Your are a twitter bot, your name is Snoop Stein (@snoop_stein), and you are helping people with their questions, you are smart and hilarious at the same time. From input message: {{text}} 图片聚合 \u0026lsquo;{{text}}, 8K 问答 answer the question of text:{{question}} about text:{{article_title}} 语义分析 describe the sentiment of the reviews strictly as \u0026ldquo;positive\u0026rdquo;, \u0026ldquo;neutral\u0026rdquo;, or \u0026ldquo;negative\u0026rdquo;. \u0026ldquo;I love the product\u0026rdquo;:positive \u0026ldquo;It is a scam\u0026rdquo;:negative \u0026ldquo;{{review}}. Hugging Face\n算法类型 具体算法 中文解释和说明 Text Classification Spam 垃圾邮件识别 Sentiment 情感分析 Sentiment (Finance) 财经情感分析 Emotions (6) 六种情绪分类 Toxicity 毒性文本识别 ESG (6) 环境社会治理分类 ESG (26) 环境社会治理分类 Hate Speech 仇恨言论识别 Crypto Buy Signals 加密货币买入信号识别 US Political Party 美国政党分类 Question Detection 问题识别 Industry 行业分类 Zero-Shot Classification Bart 零样本分类 Translation English to French (T5) 英文到法文翻译 Summarization Bart 文本摘要 Google Pegasus Google Pegasus 模型 如何实现 # 类名称 类描述 Base 基础类，所有数据库映射类的基类 NumpyEncoder 用于将 NumPy 类型编码为 JSON 格式的特殊编码器 Array 自定义的 Float 类型，将逗号替换为点号 Json 自定义的 Float 类型，将逗号替换为点号 Semaphor 信号量类，用于标识实体的状态 PREDICTOR_STATUS 枚举类，定义预测器的不同状态 Predictor 预测器类，存储预测器的相关信息和配置 Project 项目类，存储项目的相关信息 Log 日志类，存储系统日志信息 Integration 集成类，存储数据集成的信息 File 文件类，存储文件相关信息 View 视图类，存储视图的查询语句 JsonStorage JSON 存储类，用于存储 JSON 数据 Jobs 任务类，存储作业的信息和调度 JobsHistory 任务历史记录类，存储作业执行的历史信息 ChatBots 聊天机器人类，存储聊天机器人相关信息 ChatBotsHistory 聊天机器人历史记录类，存储聊天机器人交互的历史信息 Triggers 触发器类，存储触发器的信息和配置 Tasks 任务类，存储任务的信息和状态 其中比较重要的部分是，Project，Predictor，Jobs，Tasks，ChatBots， integration class Project(Base): __tablename__ = \u0026#39;project\u0026#39; id = Column(Integer, primary_key=True) created_at = Column(DateTime, default=datetime.datetime.now) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) deleted_at = Column(DateTime) name = Column(String, nullable=False) company_id = Column(Integer) __table_args__ = ( UniqueConstraint(\u0026#39;name\u0026#39;, \u0026#39;company_id\u0026#39;, name=\u0026#39;unique_project_name_company_id\u0026#39;), ) class Predictor(Base): __tablename__ = \u0026#39;predictor\u0026#39; id = Column(Integer, primary_key=True) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) created_at = Column(DateTime, default=datetime.datetime.now) deleted_at = Column(DateTime) name = Column(String) data = Column(Json) # A JSON -- should be everything returned by `get_model_data`, I think to_predict = Column(Array) company_id = Column(Integer) mindsdb_version = Column(String) native_version = Column(String) integration_id = Column(ForeignKey(\u0026#39;integration.id\u0026#39;, name=\u0026#39;fk_integration_id\u0026#39;)) data_integration_ref = Column(Json) fetch_data_query = Column(String) is_custom = Column(Boolean) learn_args = Column(Json) update_status = Column(String, default=\u0026#39;up_to_date\u0026#39;) status = Column(String) active = Column(Boolean, default=True) training_data_columns_count = Column(Integer) training_data_rows_count = Column(Integer) training_start_at = Column(DateTime) training_stop_at = Column(DateTime) label = Column(String, nullable=True) version = Column(Integer, default=1) code = Column(String, nullable=True) lightwood_version = Column(String, nullable=True) dtype_dict = Column(Json, nullable=True) project_id = Column(Integer, ForeignKey(\u0026#39;project.id\u0026#39;, name=\u0026#39;fk_project_id\u0026#39;), nullable=False) training_phase_current = Column(Integer) training_phase_total = Column(Integer) training_phase_name = Column(String) @staticmethod def get_name_and_version(full_name): name_no_version = full_name version = None parts = full_name.split(\u0026#39;.\u0026#39;) if len(parts) \u0026gt; 1 and parts[-1].isdigit(): version = int(parts[-1]) name_no_version = \u0026#39;.\u0026#39;.join(parts[:-1]) return name_no_version, version class Integration(Base): __tablename__ = \u0026#39;integration\u0026#39; id = Column(Integer, primary_key=True) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) created_at = Column(DateTime, default=datetime.datetime.now) name = Column(String, nullable=False) engine = Column(String, nullable=False) data = Column(Json) company_id = Column(Integer) __table_args__ = ( UniqueConstraint(\u0026#39;name\u0026#39;, \u0026#39;company_id\u0026#39;, name=\u0026#39;unique_integration_name_company_id\u0026#39;), ) class Jobs(Base): __tablename__ = \u0026#39;jobs\u0026#39; id = Column(Integer, primary_key=True) company_id = Column(Integer) user_class = Column(Integer, nullable=True) name = Column(String, nullable=False) project_id = Column(Integer, nullable=False) query_str = Column(String, nullable=False) start_at = Column(DateTime, default=datetime.datetime.now) end_at = Column(DateTime) next_run_at = Column(DateTime) schedule_str = Column(String) deleted_at = Column(DateTime) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) created_at = Column(DateTime, default=datetime.datetime.now) class Tasks(Base): __tablename__ = \u0026#39;tasks\u0026#39; id = Column(Integer, primary_key=True) company_id = Column(Integer) user_class = Column(Integer, nullable=True) # trigger, chatbot object_type = Column(String, nullable=False) object_id = Column(Integer, nullable=False) last_error = Column(String) active = Column(Boolean, default=True) reload = Column(Boolean, default=False) # for running in concurrent processes run_by = Column(String) alive_time = Column(DateTime(timezone=True)) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) created_at = Column(DateTime, default=datetime.datetime.now) class (Base): __tablename__ = \u0026#39;chat_bots\u0026#39; id = Column(Integer, primary_key=True) name = Column(String, nullable=False) project_id = Column(Integer, nullable=False) model_name = Column(String, nullable=False) database_id = Column(Integer) params = Column(JSON) updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now) created_at = Column(DateTime, default=datetime.datetime.now) def as_dict(self) -\u0026gt; Dict: return { \u0026#39;id\u0026#39;: self.id, \u0026#39;name\u0026#39;: self.name, \u0026#39;project_id\u0026#39;: self.project_id, \u0026#39;model_name\u0026#39;: self.model_name, \u0026#39;params\u0026#39;: self.params, \u0026#39;created_at\u0026#39;: self.created_at, \u0026#39;database_id\u0026#39;: self.database_id, } 没认真看\nPredictor作为入口，一个企业可以创建Predictor， 并且Predictor可以和Integration绑定 Integration和任务绑定，支持基于数据训练ai以及基于prompt提供功能 task和aitask绑定 并发没看，如果看的话关注一下分离点，感觉值得看的 sql和任务之间的转化没看 后续应该添加数据流分析 总结 # 不是很懂ai，所以细节不深究了 基于数据的页面可以抄，或者基于模型的数据流可以抄 ","date":"29 August 2023","permalink":"/business/mindsdb/","section":"project","summary":"核心 # 数据和AI模型更加友好调用 vs empowers developers to connect any AI/ML model to any datasource. 场景和AI模型列表 案例分析 # 使用场景 Prompt chatbot Your are a twitter bot, your name is Snoop Stein (@snoop_stein), and you are helping people with their questions, you are smart and hilarious at the same time.","title":"mindsdb"},{"content":"别人赚钱你为什么不能，别人做得好你怎么不行，你这个年龄怎么睡得着觉？\n","date":"29 August 2023","permalink":"/business/","section":"project","summary":"别人赚钱你为什么不能，别人做得好你怎么不行，你这个年龄怎么睡得着觉？","title":"project"},{"content":"Blowfish has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy. Check out the advanced tag below to see how to take this concept even further.\n","date":"29 August 2023","permalink":"/tags/","section":"Tags","summary":"Blowfish has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.","title":"Tags"},{"content":"MIS\n魔法游戏 点击 \u0026orarr; 无所谓，不在乎，不选择，爱谁谁。最后，爱谁谁\n","date":"29 August 2023","permalink":"/","section":"Welcome to WithME! 🎉","summary":"MIS\n魔法游戏 点击 \u0026orarr; 无所谓，不在乎，不选择，爱谁谁。最后，爱谁谁","title":"Welcome to WithME! 🎉"},{"content":"","date":"29 August 2023","permalink":"/tags/%E8%9E%8D%E8%B5%84/","section":"Tags","summary":"","title":"融资"},{"content":"","date":"7 November 2022","permalink":"/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"7 November 2022","permalink":"/examples/","section":"Showcase","summary":"See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.","title":"Showcase"},{"content":"","date":"6 November 2022","permalink":"/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist"},{"content":"","date":"6 November 2022","permalink":"/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey"},{"content":"","date":"7 November 2021","permalink":"/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo"},{"content":"","date":"6 November 2021","permalink":"/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo"},{"content":"","date":"6 November 2021","permalink":"/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo"},{"content":"","date":"6 November 2020","permalink":"/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template"},{"content":"","date":"6 November 2020","permalink":"/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo"},{"content":"","date":"14 August 2020","permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample"},{"content":"","date":"14 August 2020","permalink":"/tags/users/","section":"Tags","summary":"","title":"users"},{"content":"Real websites that are built with Blowfish. Check the full list in JSON format.\nBlowfish user? To add your site to this list, submit a pull request. ","date":"14 August 2020","permalink":"/users/","section":"Users","summary":"Real websites that are built with Blowfish. Check the full list in JSON format.\nBlowfish user? To add your site to this list, submit a pull request. ","title":"Users"},{"content":" MetaGPT\n核心 # 抽象企业\n容易接受。本质是AI在抽象能力的利用，我之前有想法在指标计算流程上，使用这套方式进行，在思路上不如这个容易接受。不过指标计算上，更容易落地，所以还是我没做出来 案例分析 # mock 今日头条企业 # 输入： python startup.py \u0026quot;Design a RecSys like Toutiao\u0026quot; 输出： api design， orm 图 输出不够直观，app \u0026gt; api \u0026gt; termina 如何实现 # hello world # provider: 提供claude2， claude和chatgpt， openai api的接口实现 research 角色实现 # 角色划分 # 架构师（Architect） 项目管理（ProjectManager） 工程师（Engineer） 质检工程师（QaEngineer） 研究者（Searcher） 销售（sale） 客服（CustomerService） 角色定义 name: str profile: str goal: str constraints: str desc: str 角色行文 只有一层 问题：你需要回答的输入问题 思考：你应该始终思考该怎么做 行动：要采取的行动，应该是[{tool_names}]中的一个 行动输入：行动的输入 观察：行动的结果,这里主要指获取结果 ...（这个思考/行动/行动输入/观察可以重复N次） 思考：我现在知道最终答案了 最终答案：对原始输入问题的最终答案 search google # 行动\nSearchAndSummarize 总结 # 应该不怎么精准 建模很棒，企业模型以及事件处理模型 基于指标建模，可以使用 ","date":"9 August 2020","permalink":"/business/meta-gpt/","section":"project","summary":"MetaGPT\n核心 # 抽象企业\n容易接受。本质是AI在抽象能力的利用，我之前有想法在指标计算流程上，使用这套方式进行，在思路上不如这个容易接受。不过指标计算上，更容易落地，所以还是我没做出来 案例分析 # mock 今日头条企业 # 输入： python startup.py \u0026quot;Design a RecSys like Toutiao\u0026quot; 输出： api design， orm 图 输出不够直观，app \u0026gt; api \u0026gt; termina 如何实现 # hello world # provider: 提供claude2， claude和chatgpt， openai api的接口实现 research 角色实现 # 角色划分 # 架构师（Architect） 项目管理（ProjectManager） 工程师（Engineer） 质检工程师（QaEngineer） 研究者（Searcher） 销售（sale） 客服（CustomerService） 角色定义 name: str profile: str goal: str constraints: str desc: str 角色行文 只有一层 问题：你需要回答的输入问题 思考：你应该始终思考该怎么做 行动：要采取的行动，应该是[{tool_names}]中的一个 行动输入：行动的输入 观察：行动的结果,这里主要指获取结果 .","title":"MetaGPT项目学习"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"1 January 0001","permalink":"/tags/advanced/","section":"Tags","summary":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing.","title":"Advanced"},{"content":"A quick example of how to start using author taxonomies in your articles.\n","date":"1 January 0001","permalink":"/authors/","section":"Authors Taxonomy Listing Example","summary":"A quick example of how to start using author taxonomies in your articles.","title":"Authors Taxonomy Listing Example"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" Hello ","date":"1 January 0001","permalink":"/docs/","section":"Documentation","summary":" Hello ","title":"Documentation"},{"content":"Dummy Second Author\u0026rsquo;s awesome dummy bio.\n","date":"1 January 0001","permalink":"/authors/secondauthor/","section":"Authors Taxonomy Listing Example","summary":"Dummy Second Author\u0026rsquo;s awesome dummy bio.","title":"Dummy Second Author"},{"content":"十三四岁的夏天，在路上捡到一支真枪。那时年少无知，天不怕地不怕，扣下扳机。\n没有人死，也没有人受伤。认为自己开了空枪。\n后来三十岁，走在路上听到背后有隐隐约约的风声。\n停下来转过身去，子弹正中眉心。\n后来，在那明媚的阳光中传来一声枪响。\n","date":"1 January 0001","permalink":"/leetcode-tour/","section":"LeetCode Tour","summary":"十三四岁的夏天，在路上捡到一支真枪。那时年少无知，天不怕地不怕，扣下扳机。\n没有人死，也没有人受伤。认为自己开了空枪。\n后来三十岁，走在路上听到背后有隐隐约约的风声。\n停下来转过身去，子弹正中眉心。\n后来，在那明媚的阳光中传来一声枪响。","title":"LeetCode Tour"},{"content":"Nuno\u0026rsquo;s awesome dummy bio.\n","date":"1 January 0001","permalink":"/authors/nunocoracao/","section":"Authors Taxonomy Listing Example","summary":"Nuno\u0026rsquo;s awesome dummy bio.","title":"Nuno Coração"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":" think ai google ai 现状分析 ","date":"1 January 0001","permalink":"/todo/","section":"TODO list","summary":" think ai google ai 现状分析 ","title":"TODO list"}]